'use strict';

var directives = [
  'default-src',
  'child-src',
  'connect-src',
  'font-src',
  'frame-src',
  'img-src',
  'manifest-src',
  'media-src',
  'object-src',
  'prefetch-src',
  'script-src',
  'style-src',
  'webrtc-src',
  'worker-src',
]

function warn(str) {
  console.warn(`[kpa-csp warn] ${str}`);
}

var toCamelCase = str => str.replace(/-([[A-Za-z])/, (metched, char) => char.toUpperCase())

const directivesWithCamelCase = directives.concat(directives.map(toCamelCase));

var validatePolicy = policy => {
  const keys = Object.keys(policy);
  let valid = true;

  if (!keys.length) {
    warn('Empty Policy');
    valid = false;
  }

  const invalidDirectives = keys
    .filter(key => !directivesWithCamelCase.includes(key));

  if (invalidDirectives.length) {
    warn(`Invalid Policy Name: ${invalidDirectives.join(', ')}`);
    valid = false;
  }

  return valid
}

const keyWords = ['none', 'self', 'unsafe-inline', 'unsafe-eval'];


/**
 * Autocomplete single quotes.
 * @param {string} str
 */
function repareSingleQuotes (str) {
  return keyWords.includes(str) ? `'${str}'` : str
}

var formatPolicy = policy => directives
  .filter(directive => !!policy[directive] || !!policy[toCamelCase(directive)])
  .map(directive => {
    const area = (policy[directive] || policy[toCamelCase(directive)])
      .map(repareSingleQuotes);

    return [directive, ...area]
  })

// default config
const defaultParams = {
  // 是否显示警告信息
  enableWarn: true,
  policy: {
    'default-src': ['self'],
  },
};

/**
 * @desc Set Content-Security-Policy
 * @param {Object} param
 * @param {boolean} param.enableWarn enable warn log
 * @param {Object} param.policy csp policy
 * @param {string[]} param.policy.defaultSrc
 * @param {string[]} param.policy.childSrc
 * @param {string[]} param.policy.connectSrc
 * @param {string[]} param.policy.fontSrc
 * @param {string[]} param.policy.frameSrc
 * @param {string[]} param.policy.imgSrc
 * @param {string[]} param.policy.manifestSrc
 * @param {string[]} param.policy.mediaSrc
 * @param {string[]} param.policy.objectSrc
 * @param {string[]} param.policy.prefetchSrc
 * @param {string[]} param.policy.styleSrc
 * @param {string[]} param.policy.webrtcSrc
 * @param {string[]} param.policy.workerSrc
 */
function index ({ enableWarn = true, policy = {} } = defaultParams) {
  return async (ctx, next) => {
    if (enableWarn) validatePolicy(policy);

    const policyStr = formatPolicy(policy)
      .map(directive => directive.join(' '))
      .join(';');

    ctx.set('Content-Security-Policy', policyStr);
    await next();
  };
}

module.exports = index;
